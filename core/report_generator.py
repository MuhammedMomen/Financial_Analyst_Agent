# financial_analyzer/core/report_generator.py
from fpdf import FPDF
from langchain.schema import HumanMessage
from core.llm import chat_model
import json
from core.ratio_calculator import FinancialRatios


def generate_pdf_report(ratios: FinancialRatios) -> str:
    """
    Generates PDF report with financial ratios and explanations
    :param ratios: Dictionary containing calculated ratios with specific structure
    :return: Path to generated PDF file
    """
    print("DEBUG: Starting generate_pdf_report tool")
    try:
      pdf = FPDF()
      pdf.add_page()
      pdf.set_auto_page_break(auto=True, margin=15)

      # Header
      pdf.set_font("Arial", "B", 24)
      pdf.set_text_color(44, 62, 80)
      pdf.cell(0, 20, "Financial Ratio Analysis Report", ln=True, align="C")

      # Subtitle with emoji (using plain text equivalent)
      pdf.set_font("Arial", "I", 12)
      pdf.set_text_color(127, 140, 141)
      pdf.cell(0, 10, "Your friendly financial insights!", ln=True, align="C")
      pdf.ln(10)

      # Add ratios and explanations in simple cards
      for ratio_name, ratio_value in ratios.items():
          # Card header
          pdf.set_fill_color(240, 240, 240)
          pdf.set_draw_color(200, 200, 200)
          pdf.rect(20, pdf.get_y(), 170, 10, style='FD')

          # Ratio name
          pdf.set_font("Arial", "B", 14)
          pdf.set_text_color(44, 62, 80)
          pdf.set_xy(25, pdf.get_y() + 2)
          pdf.cell(160, 6, f"{ratio_name.replace('_', ' ').title()}", ln=True)

          # Value section
          pdf.set_fill_color(249, 249, 249)
          pdf.rect(20, pdf.get_y(), 170, 15, style='FD')
          pdf.set_font("Arial", "B", 16)
          pdf.set_text_color(52, 152, 219)
          pdf.set_xy(25, pdf.get_y() + 4)
          pdf.cell(160, 6, f"{ratio_value:.2f}", ln=True)

          # Explanation section
          pdf.set_fill_color(255, 255, 255)
          pdf.rect(20, pdf.get_y(), 170, 20, style='FD')
          pdf.set_font("Arial", "", 10)
          pdf.set_text_color(100, 100, 100)
          pdf.set_xy(25, pdf.get_y() + 2)
          explanation = get_ratio_explanation(ratio_name, ratio_value, ratios)  # Pass ratio_value and ratios
          pdf.multi_cell(160, 5, explanation)

          pdf.ln(15)

      # Generate PDF in the root directory
      output_path = "financial_report.pdf" # Root directory report
      pdf.output(output_path)
      print(f"DEBUG: PDF Output Path: {output_path}")
      print("DEBUG: Finished generate_pdf_report tool")
      return output_path
    except Exception as e:
      print(f"ERROR: An error occurred inside `generate_pdf_report`  : {e}")
      return None  # to let us know the PDF part had issue


def get_ratio_explanation(ratio_name: str, ratio_value: float, ratios: FinancialRatios) -> str:
    """
    Generates explanations for financial ratios using the LLM.

    Args:
        ratio_name (str): The name of the financial ratio.
        ratio_value (float): The calculated value of the financial ratio.
        ratios (FinancialRatios): A dict containing the values of all calculated ratios

    Returns:
        str: An explanation of the financial ratio, generated by the LLM.
    """
    print(f"DEBUG: Starting get_ratio_explanation for {ratio_name}")
    prompt = f"""
        You are an expert financial analyst.

        Analyze the following financial ratio and provide a concise explanation of what it means for the company.
        Provide 2-3 sentences, comment on the strength or weakness and provide a recommendation in weakness situation of the ratio as well as provide additional context based on the other ratios provided.
        Use simple, understandable language. Be direct and clear. Do not include any introduction or conclusion text.

        Ratio Name: {ratio_name.replace('_', ' ').title()}
        Ratio Value: {ratio_value:.2f}
        All Ratios: {json.dumps(ratios, indent=4)}

        Explanation:
    """

    try:
        response = chat_model.invoke([HumanMessage(content=prompt)]).content
        print(f"DEBUG: LLM Explanation Response: {response}")
        return response.strip()
    except Exception as e:
        print(f"ERROR: Error generating ratio explanation: {e}")
        return "Could not generate an explanation for this ratio."
    finally:
        print(f"DEBUG: Finished get_ratio_explanation for {ratio_name}")